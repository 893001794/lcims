package com.lccert.crm.chemistry.util;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import com.lccert.crm.user.UserForm;
import com.mchange.v2.c3p0.ComboPooledDataSource;

/**
 * 数据库连接工具类
 * @author Eason
 *
 */
public class DB {
	
	private static ComboPooledDataSource ds = null;
	
	static {
		if(ds == null) {
			ds = new ComboPooledDataSource();
		}
	}
	
	/**
	 * 关闭ResultSet
	 * @param rs
	 */
	public static void close(ResultSet rs) {
		try {
			if (rs != null) {
				rs.close();
				rs = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 关闭Statement
	 * @param stmt
	 */
	public static void close(Statement stmt) {
		try {
			if (stmt != null) {
				stmt.close();
				stmt = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 关闭Connection
	 * @param conn
	 */
	public static void close(Connection conn) {
		try {
			if (conn != null) {
				conn.close();
				conn = null;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 创建Statement
	 * @param conn
	 * @return
	 */
	public static Statement createStatement(Connection conn) {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return stmt;
	}

	/**
	 * 创建Connection
	 * @return Connection
	 */
	public static Connection getConn() {
		Connection conn = null;
		try {
			conn = ds.getConnection();
//			Config config = new Config();
//			Class.forName(config._DRIVER);
//			conn = DriverManager.getConnection(config._URL + "?user="
//					+ config._NAME + "&password=" + config._PASSWORD
//					+ "&useUnicode=true&characterEncoding=gbk");
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return conn;
	}

	/**
	 * 创建PrepareStatement
	 * @param conn
	 * @param sql
	 * @return
	 */
	public static PreparedStatement prepareStatement(Connection conn, String sql) {
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pstmt;
	}
	
	

	/**
	 * 创建带返回自增键的PreparedStatement
	 * @param conn
	 * @param sql
	 * @param autoGeneratedKeys
	 * @return
	 */
	public static PreparedStatement prepareStatement(Connection conn,
			String sql, int autoGeneratedKeys) {
		PreparedStatement pstmt = null;
		try {
			pstmt = conn.prepareStatement(sql, autoGeneratedKeys);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return pstmt;
	}

	/**
	 * 执行查询
	 * @param stmt
	 * @param sql
	 * @return
	 */
	public static ResultSet executeQuery(Statement stmt, String sql) {
		ResultSet rs = null;
		try {
			rs = stmt.executeQuery(sql);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return rs;
	}
	
	public static void main(String[] args) {
		Connection	conn = DB.getConn();
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String sql = "select * from t_user";
		pstmt = DB.prepareStatement(conn, sql);
		try{
		rs = pstmt.executeQuery();
		if (rs.next()) {
			System.out.println(rs.getInt("id"));
		
		}
		conn.commit();
		}catch(Exception e){
			e.printStackTrace();
		}
		DB.close(rs);
		DB.close(pstmt);
		DB.close(conn);
	}
}
